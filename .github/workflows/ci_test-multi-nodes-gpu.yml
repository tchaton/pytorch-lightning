name: Multi Nodes GPU Tests

# Workflow Steps:
#  1. Checkout Pytorch Lightning
#  2. Set up Python
#  3. Configure AWS Credentials
#  4. Update Test Configuration File
#  5. Clone Elastic repo
#  6. Create node group
#  7. Apply elastic kukeclt cmd
#  8. Launch multi-node-test.yaml
#  9. Use kukeclt to get logs
#  11. Print logs
#  12. Upload coverage.

#on:
#  pull_request:
#    branches: [master, "release/1.0.x"]  # include release branches like release/1.0.x
#    types: [closed]

on: push

env:
  AWS_CLUSTER: lightning-torchelastic
  NODE_TYPE: p3.2xlarge
  NODES: 2
  NUM_GPUS: 1
  REGION: us-east-2
  MAX_CHECKS: 300
  CHECK_SPEEP: 2

jobs:
  setup-build-test-publish:
    name: multi-nodes-gpu-testing
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        pytorch-version: [1.5]
    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 50

    # runs only when merged happened.
    #if: github.event.pull_request.merged == true
    steps:

    - name: Checkout Pytorch Lightning
      uses: actions/checkout@v2
      with:
        repository: tchaton/pytorch-lightning
        ref: ${{ github.event.base_ref }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCES_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
        aws-region: us-east-2

    - name: Install AWS Client
      shell: bash
      run: |
        sudo apt-get install awscli -y

    - name: Get Current Sha Commit
      id: vars
      shell: bash
      run: |
        echo "::set-output name=SHA::$(git rev-parse --short HEAD)"

    - name: Create Job Name
      id: job
      shell: bash
      run: |
        echo "::set-output name=ID::$(echo '${{ steps.vars.outputs.SHA }}-${{ matrix.python-version }}-${{ matrix.pytorch-version }}' | tr . - )"
        echo "::set-output name=ID_NAME::$(echo 's-${{ steps.vars.outputs.SHA }}-${{ matrix.python-version }}-${{ matrix.pytorch-version }}-e' | tr . - )"
        echo "::set-output name=PYTHON_VERSION_DASH::$(echo '${{ matrix.python-version }}' | tr . - )"
        echo "::set-output name=PYTORCH_VERSION_DASH::$(echo '${{ matrix.pytorch-version }}' | tr . - )"
    
    #- uses: whoan/docker-build-with-cache-action@v5
    #  with:
    #    registry: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.us-east-2.amazonaws.com
    #    image_name: multi-nodes-gpu-testing
    #    image_tag: ${{ github.event.base_ref }}${{ matrix.python-version }}
    #    push_git_tag: true
    #    dockerfile: ./dockers/multi-gpu-tests/Dockerfile
    #    build_extra_args: "--build-arg PYTHON_VERSION=${{ matrix.python-version }}"

    - name: Update Test Configuration File
      run: |
        python -c "fname = './.github/multi-nodes/multi-nodes-gpu.yaml' ; req = open(fname).read().replace('{PYTHON_VERSION}', '${{ matrix.python-version }}').replace('{PYTHON_VERSION_DASH}', '${{ steps.job.outputs.PYTHON_VERSION_DASH }}').replace('{SHA}', '${{ steps.vars.outputs.SHA }}').replace('{PYTORCH_VERSION}', '${{ matrix.pytorch-version }}').replace('{PYTORCH_VERSION_DASH}', '${{ steps.job.outputs.PYTORCH_VERSION_DASH }}').replace('{NODES}', '$NODES').replace('{NUM_GPUS}', '$NUM_GPUS') ; open(fname, 'w').write(req)"
        python -c "fname = './.github/multi-nodes/multi-nodes-gpu.yaml' ; print(open(fname).read())"          

    - name: Install EKSClient
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
      shell: bash

    # eksclt create cluster --name=lightning-torchelastic --node-type=m5.xlarge --region=us-east-2 --nodes=2
    - name: Create Gpu Node Pool
      run: |
        aws eks --region $REGION update-kubeconfig --name $AWS_CLUSTER
        eksctl create nodegroup --name=${{ steps.job.outputs.ID }} --cluster=$AWS_CLUSTER --node-type=$NODE_TYPE  --nodes=$NODES
      shell: bash

    - name: Check Current Node Pool | Current Elatic Pods
      run: |
        eksctl get nodegroups --cluster $AWS_CLUSTER
        kubectl get pods -n elastic-job
      
    - name: Apply Elastic 
      run: |
        git clone https://github.com/pytorch/elastic.git
        cd elastic/kubernetes
        
        kubectl apply -k config/default
        
        kubectl apply -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/master/nvidia-device-plugin.yml
        kubectl apply -f https://raw.githubusercontent.com/pytorch/elastic/master/kubernetes/config/samples/etcd.yaml

    - name: Wait
      if: always()
      shell: bash
      run: |
        sleep 5

    - name: Find ETCD TCP Address
      id: tcp
      shell: bash
      run: |
        echo "::set-output name=TCP_ADDRESS::$(kubectl logs etcd -n elastic-job | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[0-9]{1,4}' | head -1)"

    - name: Update Test Configuration File
      run: |
        python -c "fname = './.github/multi-nodes/multi-nodes-gpu.yaml' ; req = open(fname).read().replace('{TCP_ADDRESS}', '${{ steps.tcp.outputs.TCP_ADDRESS }}') ; open(fname, 'w').write(req)"
        python -c "fname = './.github/multi-nodes/multi-nodes-gpu.yaml' ; print(open(fname).read())"     

    - name: Apply Multi Node Testing
      run: |
        kubectl apply -f .github/multi-nodes/multi-nodes-gpu.yaml
      shell: bash

    - name: Wait
      if: always()
      shell: bash
      run: |
        sleep 120

    - name: Listen to Jobs Logging
      shell: bash
      run: |
        # while [ $i -lt $MAX_CHECKS ]; do ((i++)); if kubectl logs ${{ steps.job.outputs.ID_NAME }}-worker-0 -n elastic-job | grep -i "error\|failed"; then status_code=1 && break; elif kubectl logs ${{ steps.job.outputs.ID }}-worker-0 -n elastic-job | grep "TEST END"; then status_code=0 && break; else printf "." ; fi; sleep $CHECK_SPEEP; done && \
        # echo "Done waiting. Job status code: $status_code" && \
        kubectl logs ${{ steps.job.outputs.ID_NAME }}-worker-0 -n elastic-job > /tmp/full_output.txt
        if grep -q '<?xml version="1.0" ?>' /tmp/full_output.txt ; then csplit /tmp/full_output.txt '/<?xml version="1.0" ?>/'; else mv /tmp/full_output.txt xx00; fi && \
        cat xx00

    - name: Upload coverage results
      uses: actions/upload-artifact@v2
      with:
        name: coverage-multi-nodes
        path: coverage
  
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      # see: https://github.com/actions/toolkit/issues/399
      continue-on-error: true
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage
        flags: multi-nodes,pytest
        name: multi-nodes-coverage
        fail_ci_if_error: true

    - name: Delete Group Node
      if: always()
      run: |
       kubectl delete  ElasticJob ${{ steps.job.outputs.ID_NAME }} -n elastic-job
       eksctl delete nodegroup ${{ steps.job.outputs.ID }} --cluster=$AWS_CLUSTER